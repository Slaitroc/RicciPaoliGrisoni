@startuml ParticipantSubmission
skinparam sequenceMessageAlign center
actor       Participant
participant Presentation
entity      Proxy
participant Authenticator
participant APIController
participant SubmissionManager
participant SuggestionMechanism
participant RecommendationProcess
participant UserManager
participant PlatformEntityManager
participant NotificationManager
database    PlatformDBMS

activate Participant
Participant -> Presentation : clickSubmitButton()
activate Presentation
Presentation -> Proxy : POST api/comm/private/{SubmissionType}/full?<param>
activate Proxy

Proxy -> Authenticator : GET api/auth/validateToken
activate Authenticator
Authenticator -> Authenticator : validateToken()
Authenticator --> Proxy : 200 OK : UserID
deactivate Authenticator

Proxy -> APIController ++ : POST api/comm/private/{SubmissionType}/full?<param>
APIController -> APIController : verifyCallParameters()
APIController -> SubmissionManager : handleSubmission(UserID, SubmissionData)
activate SubmissionManager
SubmissionManager -> SubmissionManager : check(submission)
'alt failure: missingData
'    SubmissionManager --> APIController : failureMessage
'    APIController --> Proxy : 412 Precondition Failed
'    Proxy --> Presentation : 412 Precondition Failed
'    Presentation --> Participant : showMissingDataMessage())
'end
SubmissionManager -> PlatformEntityManager : update(UserID, Submission)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : insertSubmission(SubmissionData)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : queryResult
deactivate PlatformDBMS
PlatformEntityManager --> SubmissionManager : queryResult
deactivate PlatformEntityManager
SubmissionManager --> APIController : successMessage
deactivate SubmissionManager
APIController -> SuggestionMechanism ++ : createSuggestions(UserID, SubmissionData)
SuggestionMechanism -> PlatformEntityManager ++ : retriveUsefulSubmissions(UserID, param)
PlatformEntityManager -> PlatformDBMS ++ : buildAndExecuteQuery(Query, class)
PlatformDBMS --> PlatformEntityManager -- : queryResults
PlatformEntityManager --> SuggestionMechanism -- : queryResult
SuggestionMechanism -> SuggestionMechanism : generateSuggestions()
SuggestionMechanism -> PlatformEntityManager ++ : insertSuggestion(UserID, Suggestion)
PlatformEntityManager -> PlatformDBMS ++ : insert(UserID, Suggestion)
PlatformDBMS --> PlatformEntityManager -- : queryResult
PlatformEntityManager -->  SuggestionMechanism -- : queryResult
SuggestionMechanism -> APIController -- : suggestions
APIController -> RecommendationProcess ++ : initiateRecommendationAlgorithm(UserID, SubmissionData)
RecommendationProcess -> RecommendationProcess : generateParameters()
RecommendationProcess -> UserManager ++ : retreiveUsers(Parameters)
UserManager -> PlatformEntityManager ++ : retreiveUsers(Parameters)
PlatformEntityManager -> PlatformDBMS ++ : buildAndExecuteQuery(Query, class)
PlatformDBMS --> PlatformEntityManager -- : queryResult
PlatformEntityManager --> UserManager -- : userList
UserManager --> RecommendationProcess -- : userList
RecommendationProcess -> PlatformEntityManager ++ : insertRecommendations(User, userList)
PlatformEntityManager -> PlatformDBMS ++ : insert(userList, Recommendations)
PlatformDBMS --> PlatformEntityManager -- : queryResult
PlatformEntityManager -->  RecommendationProcess -- : queryResult
RecommendationProcess --> APIController -- : successMessage
APIController -> UserManager ++ : notifyUsers(userList, Recommendation)
UserManager ->> NotificationManager ++ : notifyRecommendation(userList)
loop for every user
    NotificationManager -> NotificationManager : notify(user)
end
NotificationManager --> UserManager -- : result
UserManager --> APIController -- : result
APIController --> Proxy : 201 Created : SubmissionID, suggestions
deactivate APIController
Proxy --> Presentation : 201 Created : SubmissionID, suggestions
deactivate Proxy
Presentation --> Participant : displaySubmissionSeggestions(SubmissionID)
deactivate Presentation
deactivate Participant
@enduml
