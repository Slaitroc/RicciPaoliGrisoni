@startuml StudentSubmitInterview
skinparam sequenceMessageAlign center
actor       Student
participant Presentation
entity      Proxy
participant Authenticator
participant APIController
participant InterviewsManager
participant PlatformEntityManager
participant NotificationManager 
database    PlatformDBMS

activate Student
Student -> Presentation : clickSendInterviewAnswer()
activate Presentation
'params = { "answers": [ { "questionID": 1, "answer": "answer1" }, { "questionID": 2, "answer": "answer2" } ] ... " "timeStamp": "2021-05-01T12:00:00Z" }
Presentation -> Proxy : POST api/interviews/private/sendAnswer/{InterviewID}/full?<params>
activate Proxy
Proxy -> Authenticator : GET api/auth/validate
activate Authenticator
Authenticator -> Authenticator : validateToken()
Authenticator --> Proxy : 200 OK : UserID
deactivate Authenticator
Proxy -> APIController : POST api/interviews/private/sendAnswer/{InterviewID}/full?<params>
activate APIController
APIController -> APIController : verifyCallParameters()
alt Wrong API Call Parameters
    APIController --> Proxy : 400 Bad Request : Error
    Proxy --> Presentation : 400 Bad Request : Error
    Presentation --> Student : displayErrorMessage()
end 
APIController -> InterviewsManager : submitInterviewAnswers(InterviewID, Params, UserID)
activate InterviewsManager
InterviewsManager -> PlatformEntityManager : submitInterviewAnswers(InterviewID, Params)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewsManager : result
deactivate PlatformEntityManager
InterviewsManager --> APIController : result(InterviewID, StudentID, CompanyID, InterviewStatus)
deactivate InterviewsManager
APIController --> NotificationManager : notifyUser(InterviewID, StudentID, CompanyID, InterviewStatus)
activate NotificationManager
NotificationManager -> NotificationManager : sendInterviewAnsweredNotification\n(InterviewID, StudentID, CompanyID, InterviewStatus)
NotificationManager --> APIController : result
deactivate NotificationManager
APIController --> Proxy : 200 OK
deactivate APIController
Proxy --> Presentation : 200 OK
deactivate Proxy
Presentation --> Student : displayInterviewSendedMsg()
deactivate Presentation






