
@startuml Registration
skinparam sequenceMessageAlign center
actor       User
participant EmailClient #99FF99
participant Presentation
entity      Proxy
participant APIController
participant AccountManager
participant PlatformEntityManager
participant NotificationManager
database    PlatformDBMS
activate User
activate Presentation
User -> Presentation : clickSignUpButton()
Presentation -> Proxy : POST api/account/public/register
activate Proxy
Proxy -> APIController : POST api/account/public/register
activate APIController
APIController -> AccountManager : createUser(UserData)
activate AccountManager
AccountManager -> PlatformEntityManager : checkUserExistence(UserData)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> AccountManager : result
deactivate PlatformEntityManager
alt failure: accountFound
AccountManager --> APIController : failureMessage
APIController --> Proxy : 409 Conflict
Proxy --> Presentation : 409 Conflict
Presentation --> User : displayErrorMessage()
end
AccountManager -> PlatformEntityManager : insert(UserData)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : insert(UserData)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : success
deactivate PlatformDBMS
PlatformEntityManager --> AccountManager : success
deactivate PlatformEntityManager
AccountManager --> APIController : UserIndex
deactivate AccountManager
APIController --> Proxy : 201 Created : UserIndex
deactivate APIController
Proxy --> Presentation : 201 Created : UserIndex
deactivate Proxy
Presentation -> Presentation : saveUserIndex(UserIndex)
Presentation -> Proxy : POST api/auth/public/create-token
activate Proxy
Proxy -> Proxy  : <color:purple> InsertCredentials(UserCredentials)
Proxy -> Proxy : <color:purple> GenerateToken(UserCredentials)
Proxy -> Presentation : 201 Created : Token
deactivate Proxy
' Proxy -> Authenticator: POST api/user/create-token
' activate Authenticator
' Authenticator -> Authenticator : generateToken()
' Authenticator --> Proxy : 201 Created : Token
' deactivate Authenticator
' Proxy --> Presentation : 201 Created : Token
Presentation -> Presentation : saveToken(token)
Presentation -> Presentation : <color:purple> RequestDeviceToken
Presentation -> Proxy : POST api/notify/private/send-conf-email
activate Proxy
Proxy -> Proxy : <color:purple> Authentication
Proxy -> NotificationManager : POST api/notify/private/send-conf-email
activate NotificationManager
NotificationManager -> NotificationManager : <color:red> sendConfEmail
NotificationManager --> Proxy : 201 Created
deactivate NotificationManager
Proxy --> Presentation : 201 Created
deactivate Proxy
Presentation --> User : emailSentMessage
deactivate Presentation
User -> EmailClient : clickEmailLink(token)
activate EmailClient
EmailClient -> Presentation : clickEmailLink()
deactivate EmailClient
activate Presentation
Presentation -> Proxy : POST api/user/conf-email
activate Proxy
Proxy -> Proxy : <color:purple> Authentication
Proxy -> APIController : POST api/user/conf-email
activate APIController
APIController -> AccountManager : confirmEmail(UserIndex, UserID)
activate AccountManager
AccountManager -> PlatformEntityManager : valid(UserIndex, UserID) 
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : update(UserIndex, UserID)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : success
deactivate PlatformDBMS
PlatformEntityManager --> AccountManager : success
deactivate PlatformEntityManager
AccountManager --> APIController : success
deactivate AccountManager
APIController --> Proxy : 200 OK : success
deactivate APIController
Proxy --> Presentation : 200 OK : success
deactivate Proxy
Presentation --> User : displaySuccessMessage()
deactivate Presentation
deactivate User 
@enduml
