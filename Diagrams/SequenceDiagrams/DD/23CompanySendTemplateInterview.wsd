@startuml 23CompanySendSavedInterview
skinparam sequenceMessageAlign center
actor Company
participant Presentation
entity Proxy
participant APIController
participant InterviewManager
participant PlatformEntityManager
participant NotificationManager
database PlatformDBMS

activate Company
Company -> Presentation : clickSendInterview()
activate Presentation
'body contain the InterviewID and TemplateInterviewID
Presentation -> Proxy : POST api/interview/private/send-template-interview/
activate Proxy
Proxy -> Proxy : <color:purple> Authentication
Proxy -> APIController : POST api/interview/private/send-template-interview/
activate APIController
APIController -> InterviewManager : isOwnerOfTemplate(TemplateInterviewID, UserID)
activate InterviewManager
InterviewManager -> PlatformEntityManager : isOwnerOfTemplate(TemplateInterviewID, UserID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewManager : result
deactivate PlatformEntityManager
alt result == false
    InterviewManager --> APIController : error
    APIController --> Proxy : 400 BadRequest : Error
    Proxy --> Presentation : 400 BadRequest : Error
    Presentation --> Company : displayErrorMessage()
end
APIController -> InterviewManager : retrieveTemplateInterview\n(TemplateInterviewID)
InterviewManager -> PlatformEntityManager : retrieveTemplateInterview\n(TemplateInterviewID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewManager : result
deactivate PlatformEntityManager
'this return the InterviewData
InterviewManager -> InterviewManager : buildInterview(TemplateInterview)
InterviewManager -> PlatformEntityManager : updateInterview(InterviewID, InterviewData, Status)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : update(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : success
deactivate PlatformDBMS
PlatformEntityManager --> InterviewManager : success
deactivate PlatformEntityManager
InterviewManager --> APIController : success
deactivate InterviewManager
APIController -> NotificationManager : notifyUser(UserIDs, Data)
activate NotificationManager
NotificationManager -> NotificationManager : <color:purple> sendNotification(UserIDs, Data)
note left of NotificationManager : Notify user that the interview has been sent to him
NotificationManager --> APIController : success
deactivate NotificationManager
APIController --> Proxy : 200 OK
deactivate APIController
Proxy --> Presentation : 200 OK
deactivate Proxy
Presentation --> Company : displayInterviewSendedMsg()
deactivate Presentation
@enduml