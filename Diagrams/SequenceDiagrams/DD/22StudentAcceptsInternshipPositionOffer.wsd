@startuml 22StudentAcceptsInternshipPositionOffer
skinparam sequenceMessageAlign center

actor       Student
participant Presentation
entity Proxy
participant APIController
participant InterviewManager
participant PlatformEntityManager
participant NotificationManager
database PlatformDBMS

activate Student
Student -> Presentation : clickAcceptIntPosOff()
activate Presentation
Presentation -> Proxy : POST api/interview/private/acceptIntPosOff/{intPosOffID}
activate Proxy
Proxy -> Proxy : <color:purple> Authentication
Proxy -> APIController : POST api/interview/private/acceptIntPosOff/{intPosOffID}
activate APIController
'? I did not understand the isOwner(InterviewID, StudentID) method. I will assume that the student is the owner of the internship position offer.
APIController -> InterviewManager : acceptIntPosOff(IntPosOffID, UserID)
activate InterviewManager
InterviewManager -> PlatformEntityManager : acceptIntPosOff(IntPosOffID, UserID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewManager : result
deactivate PlatformEntityManager
InterviewManager --> APIController : result
deactivate InterviewManager
alt result == BadRequest
    note right of Presentation
        The student tried to accept an internship position offer that does not exist
        IntPosOffID is not found in the database
    end note
    APIController --> Proxy : 400 BadRequest : Error
    Proxy --> Presentation : 400 BadRequest : Error
    Presentation --> Student : displayErrorMessage()
else result == Unauthorized
    note right of Presentation
        The student tried to accept an internship position offer that does not belong to him
        A Interview do not belong to the Student if the entry (IntPosOffID, UserID) is not found in the database
    end note
    APIController --> Proxy : 401 Unauthorized : Error
    Proxy --> Presentation : 401 Unauthorized : Error
    Presentation --> Student : displayErrorMessage()
end
APIController -> NotificationManager : notifyUser(Data, UserIDs)
activate NotificationManager
note left of NotificationManager
    Notify the Company that the student has accepted the internship position offer
end note
NotificationManager -> NotificationManager : <color:purple> sendNotification(Data, UserIDs)
NotificationManager --> APIController : success
deactivate NotificationManager
APIController -> InterviewManager : stopOtherInterviews(UserID)
activate InterviewManager
InterviewManager -> PlatformEntityManager : getInterviews(UserID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewManager : Interviews
deactivate PlatformEntityManager
loop for each Interview in Interviews
    InterviewManager -> PlatformEntityManager : updateInterview(Interview, Status)
    activate PlatformEntityManager
    PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
    activate PlatformDBMS
    PlatformDBMS --> PlatformEntityManager : success
    deactivate PlatformDBMS
    PlatformEntityManager --> InterviewManager : success
    deactivate PlatformEntityManager
    InterviewManager --> APIController : success
    deactivate InterviewManager
    APIController -> NotificationManager : notifyUser(Data, UserIDs)
    activate NotificationManager
    note left of NotificationManager
        Notify other Companies that the student has accepted another internship position offer
    end note
    NotificationManager -> NotificationManager : <color:purple> sendNotification(Data, UserIDs)
    NotificationManager --> APIController : success
    deactivate NotificationManager
end
APIController --> Proxy : 200 OK
deactivate APIController
Proxy --> Presentation : 200 OK
deactivate Proxy
Presentation --> Student : displayAcceptanceOfPosition()
@enduml


