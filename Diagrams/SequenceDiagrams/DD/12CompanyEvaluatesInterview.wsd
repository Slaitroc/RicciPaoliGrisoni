@startuml CompanyEvaluatesInterview
skinparam sequenceMessageAlign center
actor       Company
participant Presentation
entity      Proxy
participant Authenticator
participant APIController
participant InterviewsManager
participant PlatformEntityManager
participant NotificationManager 
database    PlatformDBMS

activate Company
Company -> Presentation : clickDashboardInterviewsPage()
activate Presentation
Presentation -> Proxy : GET api/interviews/private/getInterviews
activate Proxy
Proxy -> Authenticator : GET api/auth/validate
activate Authenticator
Authenticator -> Authenticator : validateToken()
Authenticator --> Proxy : 200 OK : UserID
deactivate Authenticator
Proxy -> APIController : GET api/interviews/private/getInterviews
activate APIController
APIController -> InterviewsManager : getInterviews(UserID)
activate InterviewsManager
InterviewsManager -> PlatformEntityManager : getInterviews(UserID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewsManager : result
deactivate PlatformEntityManager
InterviewsManager --> APIController : Interviews
deactivate InterviewsManager
APIController --> Proxy : 200 OK : Interviews
deactivate APIController
Proxy --> Presentation : 200 OK : Interviews
deactivate Proxy
Presentation --> Company : displayInterviews()
Company -> Presentation : clickInterview(InterviewID)
Presentation --> Company : displayInterview(InterviewID)
Company -> Presentation : clickEvaluateInterview(InterviewID)
Presentation -> Proxy : GET api/interviews/private/evaluateInterview/{InterviewID}/full?<params>
activate Proxy
Proxy -> Authenticator : GET api/auth/validate
activate Authenticator
Authenticator -> Authenticator : validateToken()
Authenticator --> Proxy : 200 OK : UserID
deactivate Authenticator
Proxy -> APIController : GET api/interviews/private/evaluateInterview/{InterviewID}/full?<params>
activate APIController
APIController -> APIController : verifyCallParameters()
APIController -> InterviewsManager : evaluateInterview(InterviewID, Params)
activate InterviewsManager
InterviewsManager -> PlatformEntityManager : evaluateInterview(InterviewID, Params)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewsManager : result
deactivate PlatformEntityManager
InterviewsManager --> APIController : result(InterviewID, CompanyID, StudentID, InterviewStatus)
deactivate InterviewsManager
APIController --> NotificationManager : notifyUser(InterviewID, CompanyID, StudentID, InterviewStatus)
activate NotificationManager
NotificationManager -> NotificationManager : sendInterviewNotification\n(InterviewID, CompanyID, StudentID, InterviewStatus)
NotificationManager --> APIController : result
deactivate NotificationManager
APIController --> Proxy : 200 OK
deactivate APIController
Proxy --> Presentation : 200 OK
deactivate Proxy
Presentation --> Company : displayInterviewEvaluatedMsg()
deactivate Presentation






@enduml