@startuml CompanyEvaluatesInterview
skinparam sequenceMessageAlign center
actor       Company
participant Presentation
entity      Proxy
participant Authenticator
participant APIController
participant InterviewsManager
participant PlatformEntityManager
participant NotificationManager 
database    PlatformDBMS

activate Company
Company -> Presentation : clickDashboardInterviewsPage()
activate Presentation
Presentation -> Proxy : GET api/interviews/private/getInterviews
Proxy -> Proxy : <color:purple> Authentication
Proxy -> APIController : GET api/interviews/private/getInterviews
activate APIController
APIController -> InterviewsManager : getInterviews(UserID)
activate InterviewsManager
InterviewsManager -> PlatformEntityManager : getInterviews(UserID)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : result
deactivate PlatformDBMS
PlatformEntityManager --> InterviewsManager : result
deactivate PlatformEntityManager
InterviewsManager --> APIController : Interviews
deactivate InterviewsManager
APIController --> Proxy : 200 OK : Interviews
deactivate APIController
Proxy --> Presentation : 200 OK : Interviews
deactivate Proxy
Presentation --> Company : displayInterviews()
Company -> Presentation : clickInterview(InterviewID)
Presentation --> Company : displayInterview(InterviewID)
Company -> Presentation : clickEvaluateInterview(InterviewID)
'params are the evaluations for each question like 
'{ "answer": [ { "questionID": 1}, {"evaluation": 5}, { "questionID": 2}, {"evaluation": 4} }
Presentation -> Proxy : POST api/interviews/private/evaluateInterview/{InterviewID}/full?<params>
Proxy -> Proxy : <color:purple> Authentication
Proxy -> APIController : POST api/interviews/private/evaluateInterview/{InterviewID}/full?<params>
activate APIController
APIController -> APIController : verifyCallParameters()
APIController -> InterviewsManager : evaluateInterview(InterviewID, Params)
activate InterviewsManager
InterviewsManager -> PlatformEntityManager : evaluateInterview(InterviewID, Params)
activate PlatformEntityManager
PlatformEntityManager -> PlatformDBMS : buildAndExecuteQuery(Query, Class)
activate PlatformDBMS
PlatformDBMS --> PlatformEntityManager : success
deactivate PlatformDBMS
PlatformEntityManager --> InterviewsManager : success
deactivate PlatformEntityManager
InterviewsManager --> APIController : success
deactivate InterviewsManager
APIController -> NotificationManager : notifyUser(UserIDs, Data)
activate NotificationManager
NotificationManager -> NotificationManager : <color:purple> sendNotification(UserIDs, Data)
NotificationManager --> APIController : success
deactivate NotificationManager
APIController --> Proxy : 200 OK
deactivate APIController
Proxy --> Presentation : 200 OK
deactivate Proxy
Presentation --> Company : displayInterviewEvaluatedMsg()
deactivate Presentation






@enduml